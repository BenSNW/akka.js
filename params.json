{
  "name": "Akka.js",
  "tagline": "Akka, in Scala.js",
  "body": "![Akka.Js](https://raw.githubusercontent.com/unicredit/akka.js/merge-js/logo/akkajs.png)\r\n\r\n[![Scala.js](https://www.scala-js.org/assets/badges/scalajs-0.6.8.svg)](https://www.scala-js.org)\r\n\r\n[![Join the chat at https://gitter.im/unicredit/akka.js](https://badges.gitter.im/unicredit/akka.js.svg)](https://gitter.im/unicredit/akka.js?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\nThis repository is an ongoing effort to port Akka to the JavaScript runtime, thanks to [Scala.js](http://scala-js.org)\r\n\r\n[LIVE DEMO](https://andreatp.github.io/akka.js-site/)\r\n\r\n## Use it\r\n\r\nTo have a blazing fast kick off you can check out our [examples](https://github.com/unicredit/akka.js-examples).\r\n\r\nOtherwise, if you want to start from scratch:\r\n\r\nFirst of all you need to setup a new [Scala.js project](https://www.scala-js.org/doc/project/).\r\nThen add to your JS project configuration:\r\n```scala\r\nresolvers += Resolver.sonatypeRepo(\"snapshots\")\r\n\r\nlibraryDependencies += \"eu.unicredit\" %%% \"akkajsactor\" % \"0.1.2-SNAPSHOT\"\r\n```\r\n\r\nIf you want to use Akka Stream:\r\n```scala\r\nlibraryDependencies += \"eu.unicredit\" %%% \"akkajsactorstream\" % \"0.1.2-SNAPSHOT\"\r\n```\r\n\r\nAt this point you can use most of the Akka core Api.\r\nPlease note that you have to provide a specific configuration during ActorSystem creation.\r\nAn example could be:\r\n```scala\r\nimport com.typesafe.config.ConfigFactory\r\n\r\nval config = ConfigFactory.parseString(\"\"\"\r\nakka {\r\nhome = \"\"\r\nversion = \"2.4-SNAPSHOT\"\r\nloggers = [\"akka.event.JSDefaultLogger\"]\r\nlogging-filter = \"akka.event.JSDefaultLoggingFilter\"\r\nloggers-dispatcher = \"akka.actor.default-dispatcher\"\r\nlogger-startup-timeout = 5s\r\nloglevel = \"INFO\"\r\nstdout-loglevel = \"DEBUG\"\r\nlog-config-on-start = off\r\nlog-dead-letters = 0\r\nlog-dead-letters-during-shutdown = off\r\n\r\nactor {\r\n  provider = \"akka.actor.JSLocalActorRefProvider\"\r\n  guardian-supervisor-strategy = \"akka.actor.DefaultSupervisorStrategy\"\r\n\r\n  debug {\r\n    receive = off\r\n    autoreceive = off\r\n    lifecycle = off\r\n    event-stream = off\r\n    unhandled = off\r\n  }\r\n}\r\nscheduler {\r\n  implementation = akka.actor.EventLoopScheduler\r\n}\r\n}\r\n\"\"\")\r\n\r\nval system = ActorSystem(\"akkajsapp\", config)\r\n```\r\nYou now can use Akka as described in the official [docs](http://doc.akka.io/docs/akka/snapshot/scala.html).\r\n\r\nCheck out the @andreaTP session at Scala Days 2016:\r\n[slides](https://github.com/andreaTP/sd2016.git)\r\n\r\n## Design documentation\r\n\r\nThe BSc thesis detailing most of the work and the approach taken can be found [here](../../blob/merge-js/pdf/thesis.pdf)\r\n\r\nThe original codebase derives from SÃ©bastien Doeraene's `scala-js-actors`, you can find his original report [here](http://lampwww.epfl.ch/~doeraene/scalajs-actors-design.pdf).\r\n\r\n## Build it\r\n\r\nTo work with the very last version you can compile and publish local:\r\n```\r\ngit clone https://github.com/unicredit/akka.js\r\ncd akka.js\r\ngit submodule init\r\ngit submodule update\r\nsbt akkaActorJSIrPatches/compile\r\nsbt akkaJsActorJS/publishLocal\r\n```\r\nTo have also the bleeding edge integration of akka-stream:\r\n```\r\nsbt akkaJsActorStreamJS/publishLocal\r\n```\r\n\r\n## Akka version\r\n\r\nAs of now, code is taken from Akka MASTER\r\n\r\n## License\r\n\r\nAkka.js is distributed under the\r\n[Scala License](http://www.scala-lang.org/license.html).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}